import CodigoRecuperacion from "../models/codigo-recuperacion-model.js"
import Usuario from "../models/usuario-model.js"
import emailService from "./email-service.js"
import bcrypt from "bcryptjs"
import { Op } from "sequelize"

class RecuperacionService {
  generarCodigo() {
    return Math.floor(100000 + Math.random() * 900000).toString()
  }

  async solicitarRecuperacion(email) {
    try {
      console.log("\nüîÑ =================================")
      console.log("üîÑ INICIANDO PROCESO DE RECUPERACI√ìN")
      console.log("üîÑ =================================")
      console.log("üìß Email solicitado:", email)

      // Validar formato de email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
      if (!emailRegex.test(email)) {
        throw new Error("Formato de email inv√°lido")
      }

      // Buscar usuario por email
      console.log("üîç Buscando usuario en la base de datos...")
      const usuario = await Usuario.findOne({ where: { email } })

      if (!usuario) {
        console.log("‚ùå Usuario no encontrado para email:", email)
        throw new Error("No existe un usuario con este correo electr√≥nico")
      }

      console.log("‚úÖ Usuario encontrado:")
      console.log("   ID:", usuario.id)
      console.log("   Nombre:", usuario.nombre)
      console.log("   Email:", usuario.email)

      // Limpiar c√≥digos anteriores no utilizados para este usuario
      console.log("üßπ Limpiando c√≥digos anteriores...")
      await CodigoRecuperacion.destroy({
        where: {
          usuario_id: usuario.id,
          utilizado: false,
        },
      })

      // Generar nuevo c√≥digo
      const codigo = this.generarCodigo()
      console.log("üî¢ C√≥digo generado:", codigo)

      // Establecer expiraci√≥n (15 minutos)
      const expiracion = new Date()
      expiracion.setMinutes(expiracion.getMinutes() + 15)
      console.log("‚è∞ C√≥digo expirar√° el:", expiracion.toLocaleString())

      // Guardar c√≥digo en la base de datos
      console.log("üíæ Guardando c√≥digo en la base de datos...")
      const codigoGuardado = await CodigoRecuperacion.create({
        usuario_id: usuario.id,
        codigo,
        expiracion,
        utilizado: false,
      })

      console.log("‚úÖ C√≥digo guardado con ID:", codigoGuardado.id)

      // Enviar c√≥digo por email
      console.log("üìß Iniciando env√≠o de email...")
      try {
        const resultadoEmail = await emailService.enviarCodigoRecuperacion(email, codigo)
        console.log("‚úÖ Email enviado exitosamente!")
        console.log("üìã Resultado del env√≠o:", resultadoEmail)
      } catch (emailError) {
        console.error("‚ùå Error espec√≠fico al enviar email:", emailError.message)

        // Eliminar el c√≥digo de la BD si no se pudo enviar el email
        await CodigoRecuperacion.destroy({ where: { id: codigoGuardado.id } })

        throw new Error(`No se pudo enviar el email: ${emailError.message}`)
      }

      console.log("üîÑ =================================")
      console.log("üîÑ PROCESO COMPLETADO EXITOSAMENTE")
      console.log("üîÑ =================================\n")

      return {
        success: true,
        message: "C√≥digo enviado exitosamente",
        codigoId: codigoGuardado.id,
      }
    } catch (error) {
      console.error("\n‚ùå =================================")
      console.error("‚ùå ERROR EN PROCESO DE RECUPERACI√ìN")
      console.error("‚ùå =================================")
      console.error("‚ùå Error:", error.message)
      console.error("‚ùå Stack:", error.stack)
      console.error("‚ùå =================================\n")

      throw error
    }
  }

  // Resto de m√©todos...
  async verificarCodigo(email, codigo) {
    try {
      const usuario = await Usuario.findOne({ where: { email } })
      if (!usuario) {
        throw new Error("No existe un usuario con este correo electr√≥nico")
      }

      const codigoRecuperacion = await CodigoRecuperacion.findOne({
        where: {
          usuario_id: usuario.id,
          codigo,
          expiracion: { [Op.gt]: new Date() },
          utilizado: false,
        },
      })

      if (!codigoRecuperacion) {
        throw new Error("C√≥digo inv√°lido o expirado")
      }

      return {
        valido: true,
        usuario_id: usuario.id,
        codigo_id: codigoRecuperacion.id,
      }
    } catch (error) {
      console.error("Error al verificar c√≥digo:", error)
      throw error
    }
  }

  async cambiarPassword(usuario_id, codigo_id, nuevaPassword) {
    try {
      const usuario = await Usuario.findByPk(usuario_id)
      if (!usuario) {
        throw new Error("Usuario no encontrado")
      }

      const codigoRecuperacion = await CodigoRecuperacion.findOne({
        where: {
          id: codigo_id,
          usuario_id,
          expiracion: { [Op.gt]: new Date() },
          utilizado: false,
        },
      })

      if (!codigoRecuperacion) {
        throw new Error("C√≥digo inv√°lido o expirado")
      }

      // Verificar que la nueva contrase√±a no sea igual a la anterior
      const esIgual = await bcrypt.compare(nuevaPassword, usuario.password)
      if (esIgual) {
        throw new Error("La nueva contrase√±a no puede ser igual a la anterior")
      }

      // Encriptar nueva contrase√±a
      const hashedPassword = await bcrypt.hash(nuevaPassword, 10)

      // Actualizar contrase√±a
      await usuario.update({ password: hashedPassword })

      // Marcar c√≥digo como utilizado
      await codigoRecuperacion.update({ utilizado: true })

      return true
    } catch (error) {
      console.error("Error al cambiar contrase√±a:", error)
      throw error
    }
  }
}

export default new RecuperacionService()
